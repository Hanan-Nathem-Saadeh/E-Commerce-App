// <auto-generated />
using System;
using FastMarket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FastMarket.Migrations
{
    [DbContext(typeof(FastMarketDBContext))]
    [Migration("20220629101150_AddSetProduct1")]
    partial class AddSetProduct1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FastMarket.Auth.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FastMarket.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FastMarket.Models.CartProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("FastMarket.Models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Details = "Beauty Category contain multiple product like Blushes,Foundation,Gloss....",
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 2,
                            Details = "Clothes Category contain multiple product like jeens,T-shirt,dress....",
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 3,
                            Details = "Mobiles Category contain multiple product like IPhones,Samsung,Nokia....",
                            Name = "Mobiles"
                        },
                        new
                        {
                            Id = 4,
                            Details = "Computers & accessories Category contain multiple product like PC,Labtop,Headphones....",
                            Name = "Computers & accessories"
                        },
                        new
                        {
                            Id = 5,
                            Details = "Furniture Category contain multiple product like Beds ,Beds Covers, Sofa",
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("FastMarket.Models.CategoriesProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoriesProducts");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductId = 7
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductId = 8
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductId = 9
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductId = 10
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductId = 11
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductId = 12
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductId = 13
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductId = 14
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductId = 15
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductId = 16
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductId = 17
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductId = 18
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductId = 19
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("FastMarket.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("OrderListJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("datetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FastMarket.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 150,
                            Description = "Maybelline New York Colossal Bold Liner & Colossal Kajal - EYE KIT COMBO (Pack Of 2), 0.35 gm + 3 ml",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R.jpg",
                            Name = "Liner & Colossal Kajal",
                            Price = 15.5m
                        },
                        new
                        {
                            Id = 2,
                            Amount = 120,
                            Description = "URBANMAC Premium Synthetic Kabuki Foundation Face Powder Blush Eyeshadow Brush Makeup Brush Kit with Blender Sponge and Brush Cleaner - Makeup Brushes Set",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(5).jpg",
                            Name = "Blushes",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 3,
                            Amount = 250,
                            Description = "Coloressence Full Coverage Waterproof Lightweight Matte Formula Opaque Lotion High Definition Foundation (HDF-2) with Set of 2 Blending Sponge",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(3).jpg",
                            Name = "Foundation ",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 4,
                            Amount = 60,
                            Description = "Wiffy Concealer Base Palette 15 In 1 Cream Kit Concealer",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(4).jpg",
                            Name = "Concealer ",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 5,
                            Amount = 30,
                            Description = "UCANBE 18 Colors Aromas Nude Eyeshadow Palette Long Lasting Multi Reflective Shimmer Matte Glitter Pressed Pearls Eye Shadow Makeup Pallet",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(1).jpg",
                            Name = "Eyeshadow",
                            Price = 100m
                        },
                        new
                        {
                            Id = 6,
                            Amount = 40,
                            Description = "BESTOPE PRO Premium Synthetic Contour Concealers Foundation Powder Eye Shadows Makeup Brushes with Champagne Gold Conical Handle, 20 Count",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(6).jpg",
                            Name = "Brushes ",
                            Price = 350m
                        },
                        new
                        {
                            Id = 7,
                            Amount = 50,
                            Description = "Makeup Remover Cleansing Face Wipes, Daily Cleansing Facial Towelettes to Remove Waterproof Makeup and Mascara, Alcohol-Free, Value Twin Pack, 25 Count",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(7).jpg",
                            Name = "Makeup Remover",
                            Price = 200m
                        },
                        new
                        {
                            Id = 8,
                            Amount = 50,
                            Description = "Simple Joys by Carter's Girls and Toddlers' 4-Piece Pajama Set (Cotton Top & Fleece Bottom)",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(8).jpg",
                            Name = "Bejamas",
                            Price = 432m
                        },
                        new
                        {
                            Id = 9,
                            Amount = 50,
                            Description = "Moon and Back by Hanna Andersson Kids' Organic Holiday Family Matching 2 Piece Pajama Set",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(9).jpg",
                            Name = "2 Piece Pajama Set",
                            Price = 321m
                        },
                        new
                        {
                            Id = 10,
                            Amount = 50,
                            Description = "Muslim Dresses for Women, One-Piece Long Sleeve Islamic Prayer Dress & Prayer Rug & Beads, Islamic Set",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(10).jpg",
                            Name = "Muslim Dresses for Women",
                            Price = 722m
                        },
                        new
                        {
                            Id = 11,
                            Amount = 50,
                            Description = "5 Pack Men’s Active Quick Dry Crew Neck T Shirts | Athletic Running Gym Workout Short Sleeve Tee Tops Bulk",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(11).jpg",
                            Name = "T Shirts",
                            Price = 418m
                        },
                        new
                        {
                            Id = 12,
                            Amount = 50,
                            Description = "Apple iPhone 13 Pro Max (256 GB, Alpine Green) [Locked] + Carrier Subscription",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(12).jpg",
                            Name = "Apple iPhone 13 Pro Max ",
                            Price = 333m
                        },
                        new
                        {
                            Id = 13,
                            Amount = 50,
                            Description = "SAMSUNG Galaxy S22 Cell Phone, Factory Unlocked Android Smartphone, 256GB, 8K Camera & Video, Brightest Display Screen, Long Battery Life, Fast 4nm Processor, US Version, Green",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(13).jpg",
                            Name = "SAMSUNG Galaxy S22",
                            Price = 543m
                        },
                        new
                        {
                            Id = 14,
                            Amount = 50,
                            Description = "Nokia XR20 5G | Android 11 | Unlocked Smartphone | Dual SIM | US Version | 6/128GB | 6.67-Inch Screen | 48MP Dual Camera | Granite",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(14).jpg",
                            Name = "Nokia XR20 5G",
                            Price = 432m
                        },
                        new
                        {
                            Id = 15,
                            Amount = 50,
                            Description = "Newest HP Pavilion Business Laptop, 15.6 Full HD Display, 11th Gen Intel i7-1165G7(Up to 4.7GHz), 16GB RAM, 1TB PCIe SSD, Intel Iris Xe Graphics, Backlit KB, Fingerprint, Bluetooth, Windows 11 Pro",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(15).jpg",
                            Name = "Business Laptop",
                            Price = 200m
                        },
                        new
                        {
                            Id = 16,
                            Amount = 50,
                            Description = "New Microsoft Surface Go 2 - 10.5 Touch-Screen - Intel Pentium - 4GB Memory - 64GB - Wifi - Platinum (Latest Model)",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(16).jpg",
                            Name = "Touch-Screen - Intel Pentium ",
                            Price = 345m
                        },
                        new
                        {
                            Id = 17,
                            Amount = 50,
                            Description = "HP Chromebook 14-inch HD Touchscreen Laptop, Intel Celeron N4000, 4 GB RAM, 32 GB eMMC, Chrome (14a-na0080nr, Forest Teal)",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(17).jpg",
                            Name = "HP Chromebook 14-inch HD Touchscreen Laptop",
                            Price = 734m
                        },
                        new
                        {
                            Id = 18,
                            Amount = 50,
                            Description = "YITAHOME 6 Pieces Patio Furniture Set, Outdoor Conversation Set, Outside Sectional Sofa PE Rattan Wicker Set with Table and Cushion for Porch Lawn Garden and Poolside, Gray Gradient",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(18).jpg",
                            Name = "YITAHOME 6 Pieces Patio Furniture Set",
                            Price = 456m
                        },
                        new
                        {
                            Id = 19,
                            Amount = 50,
                            Description = "LOKATSE HOME Outdoor 2 Piece Patio Chairs Conversation Set Metal Frame Furniture with Cushion, Blue",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(19).jpg",
                            Name = "Chairs Conversation Set Metal Frame Furniture",
                            Price = 254m
                        },
                        new
                        {
                            Id = 20,
                            Amount = 50,
                            Description = "DHP Dakota Upholstered Platform Bed with Underbed Storage Drawers and Diamond Button Tufted Headboard and Footboard, No Box Spring Needed, Queen, White Faux Leather",
                            ImageUri = "https://faststorestorage.blob.core.windows.net/images/R(20).jpg",
                            Name = "Bed",
                            Price = 512m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "administrator",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "editor",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "users",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FastMarket.Models.CartProduct", b =>
                {
                    b.HasOne("FastMarket.Models.Cart", "Cart")
                        .WithMany("cartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastMarket.Models.Product", "Product")
                        .WithMany("cartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastMarket.Models.CategoriesProduct", b =>
                {
                    b.HasOne("FastMarket.Models.Categories", "Categories")
                        .WithMany("categoriesProducts")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastMarket.Models.Product", "Product")
                        .WithMany("categoriesProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FastMarket.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FastMarket.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastMarket.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FastMarket.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastMarket.Models.Cart", b =>
                {
                    b.Navigation("cartProducts");
                });

            modelBuilder.Entity("FastMarket.Models.Categories", b =>
                {
                    b.Navigation("categoriesProducts");
                });

            modelBuilder.Entity("FastMarket.Models.Product", b =>
                {
                    b.Navigation("cartProducts");

                    b.Navigation("categoriesProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
